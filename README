======================
|KANKA 0.0000<snip>1 |
======================

FAQ
---

Q: What is this?
A: This will eventually be a simple, dependancy-free webserver that handles paths using plugins rather than by looking at the filesystem. (So, for example, in order to find /noam/blah/whatever is will look in the paths.conf, find that /noam/* is sent to python.so with argument "path=/home/www/scripts/;module=noam", rather than the python file residing in a /var/www directory).

Q: OK, but what is it right *now*?
A: *Sigh*. Mostly a set of C development tools I am writing in order to serve me in building Kanka. These include the managed string library, which does string boundchecking for me, as well as the blame allocator, which alerts the developer to unmatched allocations on debug builds (but refers transparently to malloc on production builds).

Q: What are bmalloc and bfree? Are they "basic malloc"?
A: Haven't you been listening? Jeez. Bmalloc and bfree are part of the blame allocator, which allocates memory just like malloc, but in the end spits out a list of unmatched allocations, including the file and line on which they were allocated.



BLAME ALLOC INFORMATION
-----------------------
Bmalloc and bfree are called and work exactly like their stdlib counterparts. Bmalloc and its ilk defer to malloc after storing extra information about the allocation in the blame table. In order for bmalloc to run correctly, you must call binit() before allocating any memory. You should also call blame() at the end of your program, or else you're not really gaining anything from using bmalloc. If do not add -DBLAME to the gcc flags, bmalloc, bfree and brealloc will defer transparently to malloc, free, and realloc. There is no bcalloc, and if you want to use calloc you should grow a pair, you pussy.


